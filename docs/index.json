[{"content":"RF环境搭建 pip install -U robotframework 查看版本 robot \u0026ndash;version\n","permalink":"https://www.gemc.club/posts/testing/autotest/robotframework/rf_%E7%AE%80%E4%BB%8B/","summary":"RF环境搭建 pip install -U robotframework 查看版本 robot \u0026ndash;version","title":"Rf_简介"},{"content":"接口测试 百度百科的定义:\n 接口测试是测试系统组件间接口的一种测试。接口测试主要用于检测外部系统与系统之间以及内部各个子系统之间的交互点。测试的重点是要检查数据的交换，传递和控制管理过程，以及系统间的相互逻辑依赖关系等\n 什么是接口测试 在了解什么是接口测试之前，让我们先了解一下什么是接口。\n什么是接口 是指对协定进行定义的引用类型。接口就是规定要程序做什么，但不在其中实现。\n接口的分类 # http 1. post 2. get 3. delete 4. put 5. ... 接口测试流程 凡事预则立不预则废。不管做什么事情，都应该有一个规则流程。接口测试也同样如此。\nV模型  需求讨论 需求评审 场景设计 用例设计 数据准备 执行  设计测试用例的理由  理清思路，避免漏测 提高测试效率 跟进测试进度 测试报告 跟进重复性工作  用例设计  功能 逻辑业务 异常 安全  用例设计-功能用例设计  功能是否正常 功能是否按照接口文档实现  用例设计-逻辑用例设计  是否依赖业务  用例设计-异常用例设计  参数异常  关键字参数 参数为空 多、少参数 错误参数   数据异常  关键字数据 数据为空 长度不一致 错误数据    用例设计-安全用例设计  cookie header 唯一识别码  接口测试环境搭建 这里使用Python的第三方库：requests。这是一个非常成熟且热门的库。\npip install -U requests ","permalink":"https://www.gemc.club/posts/testing/interfaces/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","summary":"接口测试 百度百科的定义:\n 接口测试是测试系统组件间接口的一种测试。接口测试主要用于检测外部系统与系统之间以及内部各个子系统之间的交互点。测试的重点是要检查数据的交换，传递和控制管理过程，以及系统间的相互逻辑依赖关系等\n 什么是接口测试 在了解什么是接口测试之前，让我们先了解一下什么是接口。\n什么是接口 是指对协定进行定义的引用类型。接口就是规定要程序做什么，但不在其中实现。\n接口的分类 # http 1. post 2. get 3. delete 4. put 5. ... 接口测试流程 凡事预则立不预则废。不管做什么事情，都应该有一个规则流程。接口测试也同样如此。\nV模型  需求讨论 需求评审 场景设计 用例设计 数据准备 执行  设计测试用例的理由  理清思路，避免漏测 提高测试效率 跟进测试进度 测试报告 跟进重复性工作  用例设计  功能 逻辑业务 异常 安全  用例设计-功能用例设计  功能是否正常 功能是否按照接口文档实现  用例设计-逻辑用例设计  是否依赖业务  用例设计-异常用例设计  参数异常  关键字参数 参数为空 多、少参数 错误参数   数据异常  关键字数据 数据为空 长度不一致 错误数据    用例设计-安全用例设计  cookie header 唯一识别码  接口测试环境搭建 这里使用Python的第三方库：requests。这是一个非常成熟且热门的库。","title":"接口测试基础知识"},{"content":"什么是数据驱动 从它的定义来看，就是数据的改变从而驱动自动化测试的执行，最终引起测试结果的改变。说的直白些，就是参数化的应用。\n自动化测试都是基于代码实现的，为了考虑到测试用例的复用性，会将测试数据与代码进行分离，然后基于数据的变动来实现各个流程的条件覆盖。\n数据驱动形式  Excel数据驱动 Yaml/Json/Py数据驱动  数据维护较为便利，数据结构直观   其他 txt、csv。。。  Excel数据驱动实现 xlwt/xlrd 已过时，目前 excel基本都是2010及以上，使用openpyxl进行操作\n实现方式  所有操作步骤+测试数据基于excel实现 只在excel中保存测试数据，测试步骤基于unittest、pytest实现  excel实现  打开文件 读取数据 测试  RF基于关键字驱动与数据驱动结合的自动化测试框架，能够兼容WebUI、APPUI和接口自动化测试。\nRF不需要编写代码，本身基于RF自定义的一种表格编写语法的形式来实现工具的自动化测试。\n","permalink":"https://www.gemc.club/posts/testing/autotest/selenium/selenium_%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8/","summary":"什么是数据驱动 从它的定义来看，就是数据的改变从而驱动自动化测试的执行，最终引起测试结果的改变。说的直白些，就是参数化的应用。\n自动化测试都是基于代码实现的，为了考虑到测试用例的复用性，会将测试数据与代码进行分离，然后基于数据的变动来实现各个流程的条件覆盖。\n数据驱动形式  Excel数据驱动 Yaml/Json/Py数据驱动  数据维护较为便利，数据结构直观   其他 txt、csv。。。  Excel数据驱动实现 xlwt/xlrd 已过时，目前 excel基本都是2010及以上，使用openpyxl进行操作\n实现方式  所有操作步骤+测试数据基于excel实现 只在excel中保存测试数据，测试步骤基于unittest、pytest实现  excel实现  打开文件 读取数据 测试  RF基于关键字驱动与数据驱动结合的自动化测试框架，能够兼容WebUI、APPUI和接口自动化测试。\nRF不需要编写代码，本身基于RF自定义的一种表格编写语法的形式来实现工具的自动化测试。","title":"Selenium_数据驱动"},{"content":"今天所有的成就都不是本来应该得到的。决定是成功的起点，坚持是成功的终点。做任何事情，都需要坚持，你还没有看到终点，或者你马上就要到达终点，却半途而废，那么你的梦想只会离你越来越远。如果坚持并努力，下一个成功者就是你。\n关键字驱动 关键字驱动是自动化测试技术体系下非常核心的技术点。封装就是关键字驱动的核心。\n结构 代码与数据分离，逻辑代码与测试代码分离\n实现目标  生成测试文件，管理所有的操作行为以及关联数据 基于代码层级的文件执行，来实现基于文件内容的自动化测试流程  数据驱动 Excel数据驱动是最容易上手的数据驱动\nExcel常用库  Openpyxl  pip install -U openpyxl    操作excel 读写流程: 1. 获取excel文件 2. 获取sheet页 3. 获取单元格内容\n","permalink":"https://www.gemc.club/posts/testing/autotest/selenium/selenium_%E5%85%B3%E9%94%AE%E5%AD%97%E9%A9%B1%E5%8A%A8/","summary":"今天所有的成就都不是本来应该得到的。决定是成功的起点，坚持是成功的终点。做任何事情，都需要坚持，你还没有看到终点，或者你马上就要到达终点，却半途而废，那么你的梦想只会离你越来越远。如果坚持并努力，下一个成功者就是你。\n关键字驱动 关键字驱动是自动化测试技术体系下非常核心的技术点。封装就是关键字驱动的核心。\n结构 代码与数据分离，逻辑代码与测试代码分离\n实现目标  生成测试文件，管理所有的操作行为以及关联数据 基于代码层级的文件执行，来实现基于文件内容的自动化测试流程  数据驱动 Excel数据驱动是最容易上手的数据驱动\nExcel常用库  Openpyxl  pip install -U openpyxl    操作excel 读写流程: 1. 获取excel文件 2. 获取sheet页 3. 获取单元格内容","title":"Selenium(二): 关键字驱动"},{"content":"Selenium简介 Selenium安装  pip install -U selenium 安装浏览器驱动  edge microsoft-edge chrome chromedriver firefox geckodriver    安装浏览器驱动可以配置一个系统环境，方便日后更新和使用。\nselenium初使用  打开的浏览器是无缓存且默认带有自动化软件控制的警告提示 与所有浏览器的交互都是基于Webdriver实现的 自动化测试技术是使用测试框架实现的非线性代码 框架一般基于关键字驱动或POM为核心而实现  #!/usr/bin/env python # ----------------------------------- # -*- coding: utf-8 -*- # @Time : 2021/10/16 18:55 # @Author : Gemc # @Email : ge942812@gmail.com # @File : baidu_home.py # @Project : selenium_demo # @desc : # ----------------------------------- import time from selenium import webdriver from selenium.webdriver.common.by import By driver = webdriver.Edge() driver.get(\u0026#39;https://www.baidu.com\u0026#39;) print(driver.title) driver.find_element(By.ID, \u0026#39;kw\u0026#39;).send_keys(\u0026#39;明天会更好\u0026#39;) driver.find_element(By.ID, \u0026#39;su\u0026#39;).click() time.sleep(6) driver.quit() 框架优势  冗余的降低 可复用性 维护性  测试框架理念  设计模式  关键字驱动 POM \u0026hellip;   数据驱动: Excel/Yaml/json/csv 框架结构  代码与数据分离 测试代码与逻辑代码分离    框架的编码不是一成不变的。框架的难度在于框架的设计而不是编码。\n","permalink":"https://www.gemc.club/posts/testing/autotest/selenium/selenium%E7%AE%80%E4%BB%8B/","summary":"Selenium简介 Selenium安装  pip install -U selenium 安装浏览器驱动  edge microsoft-edge chrome chromedriver firefox geckodriver    安装浏览器驱动可以配置一个系统环境，方便日后更新和使用。\nselenium初使用  打开的浏览器是无缓存且默认带有自动化软件控制的警告提示 与所有浏览器的交互都是基于Webdriver实现的 自动化测试技术是使用测试框架实现的非线性代码 框架一般基于关键字驱动或POM为核心而实现  #!/usr/bin/env python # ----------------------------------- # -*- coding: utf-8 -*- # @Time : 2021/10/16 18:55 # @Author : Gemc # @Email : ge942812@gmail.com # @File : baidu_home.py # @Project : selenium_demo # @desc : # ----------------------------------- import time from selenium import webdriver from selenium.webdriver.common.by import By driver = webdriver.","title":"Selenium简介"},{"content":"如果生命有漩涡，那是在教你坚强。这时候如果你把时间和精力都给了抱怨，那你就错过了成长和蜕变的机会。  不要失去希望，你永远不知道明天会带来什么。很多事犹如天气，慢慢热或者渐渐冷，等到惊悟，已过了一季。趁年青，趁梦想还在，想去的地方，现在就去。想做的事情，现在就做。\n软件测试 软件测试行业的核心技术： 自动化测试\n分类  web UI App UI 接口  语言选择  Python Java  形态  测试框架 测试平台(Web系统，可视化)  自动化技术 Web  selenium () cypress playwright RF Airtest  Selenium + Webdriver结合实际业务。设计不同的测试形态： 关键字驱动/POM+数据驱动(excel/yaml/py/json)+用例管理+报告集成+日志管理+配置管理\u0026hellip;\n接口 单接口的全覆盖与关联接口的业务链覆盖\nAPP Appium是目前主流的APP自动化测试技术\n","permalink":"https://www.gemc.club/posts/testing/autotest/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95_20211016/","summary":"如果生命有漩涡，那是在教你坚强。这时候如果你把时间和精力都给了抱怨，那你就错过了成长和蜕变的机会。  不要失去希望，你永远不知道明天会带来什么。很多事犹如天气，慢慢热或者渐渐冷，等到惊悟，已过了一季。趁年青，趁梦想还在，想去的地方，现在就去。想做的事情，现在就做。\n软件测试 软件测试行业的核心技术： 自动化测试\n分类  web UI App UI 接口  语言选择  Python Java  形态  测试框架 测试平台(Web系统，可视化)  自动化技术 Web  selenium () cypress playwright RF Airtest  Selenium + Webdriver结合实际业务。设计不同的测试形态： 关键字驱动/POM+数据驱动(excel/yaml/py/json)+用例管理+报告集成+日志管理+配置管理\u0026hellip;\n接口 单接口的全覆盖与关联接口的业务链覆盖\nAPP Appium是目前主流的APP自动化测试技术","title":"自动化测试--初境"},{"content":"有些事情，如果不在该完成的阶段把它完成，那它以后一定会不断跳出来烦你，并且越往后成本越高。 调整自己的心态，生活失意时，静品命运苦乐韵味；人生腾达时，静听生命辉煌乐章；许多人的失败和痛苦，不是出不去，而是回不来。\n命令行详解 1. -m 标记表达式 2. -q 简单打印，只打印测试用例的执行结果 3. -s 详细打印 4. -x 遇到错误时停止测试 5. --maxfail=num 当用例错误个数达到指定数量时，停止测试 6. -k 匹配用例名称 异常断言 pytest.raises()当做上下文管理器，抛出异常时获取相应的异常\ndef test_zero(): with pytest.raise(ZeroDivisionError) as errinfo: 1 / 0 主要属性  .value 值 .type 类型 .traceback 错误栈  检查断言装饰器  @pytest.mark.xfail()  setUp和tearDown unittest单元测试框架中提供了4种前后置方法：\n setup() setupClass() teardown() teardownClass()  pytest同样提供超过4种的前后置方法:\n  模块级别\n 整个.py模块只执行一次 setup_module teardown_module    函数级别 \u0026ndash; 不在类中的方法\n 每个函数级别用例都执行 setup_function teardown_function    类级别\n 整个类中只执行一次 setup_class teardown_class    方法级别\n 类中每个方法前后都执行一次 setup_method teardown_method    方法细化\n setup teardown    fixture详解 fixture课自定义测试用例的前置条件\nfixture优势  命名方式灵活 conftest.py配置实现数据共享，不用import自动找到fixture  fixture参数详解 scope=\u0026ldquo;module\u0026rdquo; 可实现多个.py跨文件共享前置 scope=\u0026ldquo;session\u0026rdquo; 实现多个.py文件使用一个session测试多个用例\n","permalink":"https://www.gemc.club/posts/testing/pytest_20211015/","summary":"有些事情，如果不在该完成的阶段把它完成，那它以后一定会不断跳出来烦你，并且越往后成本越高。 调整自己的心态，生活失意时，静品命运苦乐韵味；人生腾达时，静听生命辉煌乐章；许多人的失败和痛苦，不是出不去，而是回不来。\n命令行详解 1. -m 标记表达式 2. -q 简单打印，只打印测试用例的执行结果 3. -s 详细打印 4. -x 遇到错误时停止测试 5. --maxfail=num 当用例错误个数达到指定数量时，停止测试 6. -k 匹配用例名称 异常断言 pytest.raises()当做上下文管理器，抛出异常时获取相应的异常\ndef test_zero(): with pytest.raise(ZeroDivisionError) as errinfo: 1 / 0 主要属性  .value 值 .type 类型 .traceback 错误栈  检查断言装饰器  @pytest.mark.xfail()  setUp和tearDown unittest单元测试框架中提供了4种前后置方法：\n setup() setupClass() teardown() teardownClass()  pytest同样提供超过4种的前后置方法:\n  模块级别\n 整个.py模块只执行一次 setup_module teardown_module    函数级别 \u0026ndash; 不在类中的方法\n 每个函数级别用例都执行 setup_function teardown_function    类级别","title":"Pytest_命令详解"},{"content":"有些事，现在看来不过如此，但在当时，真的就是一个人一秒一秒熬过来的；人生是一场永不落幕的演出，我们每一个人都是演员，只不过，有的人顺从自己，有的人取悦观众。 --------------------------- 每日一句\npytest单元测试框架 什么是单元测试框架 单元测试是指软件开发中，最小单位的测试。(函数、方法)\n单元测试框架 # java 1. junit 2. testng # python 1. unittest 2. pytest 单元测试框架的作用  测试发现 从多个文件里寻找测试用例 测试执行 按照一定的业务规则和顺序执行生成测试结果 测试判断 通过断言判断预期结果和实际结果 测试报告 统计测试进度，生成测试报告  单元测试框架和自动化测试框架的关系 作用  提高测试效率 减少人工干预，提高测试的准确性，增加代码的复用性 核心思想是让不懂代码的人也能够通过框架进行自动化测试  pytest与自动化测试框架的关系   单元测试框架： 其只是自动化框架的组成之一 pom设计模式： 其只是自动化框架的组成之一   框架包含更多的东西，包括不限于以下：\n 数据驱动 关键字驱动 全局配置文件的封装 日志监控 selenium、requests二次封装 断言 发送邮件 \u0026hellip;  end\n","permalink":"https://www.gemc.club/posts/testing/pytest_201014/","summary":"有些事，现在看来不过如此，但在当时，真的就是一个人一秒一秒熬过来的；人生是一场永不落幕的演出，我们每一个人都是演员，只不过，有的人顺从自己，有的人取悦观众。 --------------------------- 每日一句\npytest单元测试框架 什么是单元测试框架 单元测试是指软件开发中，最小单位的测试。(函数、方法)\n单元测试框架 # java 1. junit 2. testng # python 1. unittest 2. pytest 单元测试框架的作用  测试发现 从多个文件里寻找测试用例 测试执行 按照一定的业务规则和顺序执行生成测试结果 测试判断 通过断言判断预期结果和实际结果 测试报告 统计测试进度，生成测试报告  单元测试框架和自动化测试框架的关系 作用  提高测试效率 减少人工干预，提高测试的准确性，增加代码的复用性 核心思想是让不懂代码的人也能够通过框架进行自动化测试  pytest与自动化测试框架的关系   单元测试框架： 其只是自动化框架的组成之一 pom设计模式： 其只是自动化框架的组成之一   框架包含更多的东西，包括不限于以下：\n 数据驱动 关键字驱动 全局配置文件的封装 日志监控 selenium、requests二次封装 断言 发送邮件 \u0026hellip;  end","title":"Pytest 入门"},{"content":"pytest是一款非常灵活且成熟的Python测试框架。pytest 是一个使得构建简单和可伸缩的测试很容易的框架。测试不需要样板代码。几分钟就可以开始对应用程序或库进行小的单元测试或复杂的功能测试。这里将记录pytest的一些简单使用。\nPython内建的unittest也是一个好用的单元测试框架。\npytest简介 特点  pytest是一个非常成熟的python单元测试框架，比unittest更灵活，更容易上手 pytest可以和selenium，requests、appium结合实现web自动化、接口自动化、app自动化 pytest可以实现测试用例的跳过以及重跑失败用例 pytest配合allure生成美观的测试报告 pytest集合jenkins实现集成测试 pytest拥有丰富的插件  pytest pytest-html 生成html格式的自动化测试报告 pytest-xdist 测试用例分布式执行，多CPU分发 pytest-ordering 用来改变测试用例的执行顺序 pytest-rerunfailures 用例失败后重跑 allure-pytest 生成美观的测试报告    安装pytest # 安装最新版pytest pip install -U pytest # 查看安装版本 pytest --version 创建第一个测试 def func(arg): return arg + 1 def test_answer(): assert func(4) == 6 文件所在目录命令行中执行pytest。从代码中便可以看出这是不相等的。执行pytest后，将会给出详细的错误信息，请看：\npytest测试用例的默认规则  模块名必须以test_开头或者_test结尾 测试类必须以Test开头，且不能含有__init__方法 测试方法必须以test开头  pytest测试用例的运行方式  主函数模式 命令行模式 通过pytest.ini配置文件运行  主函数模式 Code:\n#!/usr/bin/env python # ----------------------------------- # -*- coding: utf-8 -*- # @Time : 2021/10/14 22:55 # @Author : Gemc # @Email : ge942812@gmail.com # @File : test_login.py # @Project : pytestdemo # @desc : # ----------------------------------- import pytest class TestLogin: def test_01_baili(self): print(\u0026#39;测试百里\u0026#39;) if __name__ == \u0026#39;__main__\u0026#39;: pytest.main([\u0026#39;-s\u0026#39;]) 运行结果 命令行模式 命令行中文件路径下执行 pytest\n参数详解  -s 表示输出调试信息，包括print打印  ","permalink":"https://www.gemc.club/posts/testing/pytest_20211011/","summary":"pytest是一款非常灵活且成熟的Python测试框架。pytest 是一个使得构建简单和可伸缩的测试很容易的框架。测试不需要样板代码。几分钟就可以开始对应用程序或库进行小的单元测试或复杂的功能测试。这里将记录pytest的一些简单使用。\nPython内建的unittest也是一个好用的单元测试框架。\npytest简介 特点  pytest是一个非常成熟的python单元测试框架，比unittest更灵活，更容易上手 pytest可以和selenium，requests、appium结合实现web自动化、接口自动化、app自动化 pytest可以实现测试用例的跳过以及重跑失败用例 pytest配合allure生成美观的测试报告 pytest集合jenkins实现集成测试 pytest拥有丰富的插件  pytest pytest-html 生成html格式的自动化测试报告 pytest-xdist 测试用例分布式执行，多CPU分发 pytest-ordering 用来改变测试用例的执行顺序 pytest-rerunfailures 用例失败后重跑 allure-pytest 生成美观的测试报告    安装pytest # 安装最新版pytest pip install -U pytest # 查看安装版本 pytest --version 创建第一个测试 def func(arg): return arg + 1 def test_answer(): assert func(4) == 6 文件所在目录命令行中执行pytest。从代码中便可以看出这是不相等的。执行pytest后，将会给出详细的错误信息，请看：\npytest测试用例的默认规则  模块名必须以test_开头或者_test结尾 测试类必须以Test开头，且不能含有__init__方法 测试方法必须以test开头  pytest测试用例的运行方式  主函数模式 命令行模式 通过pytest.ini配置文件运行  主函数模式 Code:\n#!/usr/bin/env python # ----------------------------------- # -*- coding: utf-8 -*- # @Time : 2021/10/14 22:55 # @Author : Gemc # @Email : ge942812@gmail.","title":"pytest介绍"},{"content":"Playwright是微软提供的一款自动化测试工具。Playwright为现代web应用提供可靠的端到端测试。Playwright目前之前多种编程语言，包括JavaScript、TypeScript、Python、.NET和Java等。本文章将使用Python作为编程语言进行编写，编辑器使用VsCode。\nWeb UI自动化测试 在日常的UI自动化测试中，Selenium是最经常使用的，也是老牌的UI自动化测试工具。其他常见的Web端常见的自动化测试工具还包括Cypress、Puppeteer等，移动端常见的工具是Appium。 这里主要记录Playwright的使用。\nPlaywright Playwright的特点：\n# 支持所有浏览器 1. Chrome、Firefox、Webkit、Edge 2. 跨平台的测试 3. 移动端测试 4. headless(无UI)和headed # 快速可靠的执行 1. 自动等待的API 2. 无超时的自动化 3. 快速隔离浏览器上下文 4. 弹性元素选择器 # 强大的自动化 1. 剧作家是一个进程外自动化驱动程序，它不受页面内JavaScript执行范围的限制，可以使用多个页面实现场景自动化。 2. 强大的网络控制。剧作家引入了上下文范围的网络拦截，以存根和模拟网络请求。 3. 现代web特性。剧作家支持通过阴影穿透选择器，地理位置，权限，web工作者和其他现代web api的web组件 4. 覆盖所有场景的功能。支持文件下载和上传，进程外iframes，本机输入事件，甚至暗模式。 安装Playwright 由于本文使用的是Python语言，因此安装Playwright非常的容易，只要使用pip进行安装即可。\n# 安装playwright pip install playwright 安装浏览器驱动 Playwright支持自定义浏览器驱动的安装位置，只需要在系统变量中添加PLAYWRIGHT_BROWSERS_PATH即可。 Playwright支持多款浏览器包括：Chrome、Firefox、Webkit。\n# 安装浏览器驱动 playwright install 安装完成，开始初步的体验吧。将以打开百度首页为例进行使用Playwright。\nimport asyncio import time from playwright.async_api import async_playwright async def main(): async with async_playwright() as p: browser = await p.firefox.launch(headless=False) page = await browser.new_page() await page.goto(\u0026#34;https://www.baidu.com\u0026#34;) print(await page.title()) time.sleep(10) await browser.close() asyncio.run(main()) 打开百度首页 打印标题 Piaywright的基本介绍到此结束。\n","permalink":"https://www.gemc.club/posts/playwright_base/","summary":"Playwright是微软提供的一款自动化测试工具。Playwright为现代web应用提供可靠的端到端测试。Playwright目前之前多种编程语言，包括JavaScript、TypeScript、Python、.NET和Java等。本文章将使用Python作为编程语言进行编写，编辑器使用VsCode。\nWeb UI自动化测试 在日常的UI自动化测试中，Selenium是最经常使用的，也是老牌的UI自动化测试工具。其他常见的Web端常见的自动化测试工具还包括Cypress、Puppeteer等，移动端常见的工具是Appium。 这里主要记录Playwright的使用。\nPlaywright Playwright的特点：\n# 支持所有浏览器 1. Chrome、Firefox、Webkit、Edge 2. 跨平台的测试 3. 移动端测试 4. headless(无UI)和headed # 快速可靠的执行 1. 自动等待的API 2. 无超时的自动化 3. 快速隔离浏览器上下文 4. 弹性元素选择器 # 强大的自动化 1. 剧作家是一个进程外自动化驱动程序，它不受页面内JavaScript执行范围的限制，可以使用多个页面实现场景自动化。 2. 强大的网络控制。剧作家引入了上下文范围的网络拦截，以存根和模拟网络请求。 3. 现代web特性。剧作家支持通过阴影穿透选择器，地理位置，权限，web工作者和其他现代web api的web组件 4. 覆盖所有场景的功能。支持文件下载和上传，进程外iframes，本机输入事件，甚至暗模式。 安装Playwright 由于本文使用的是Python语言，因此安装Playwright非常的容易，只要使用pip进行安装即可。\n# 安装playwright pip install playwright 安装浏览器驱动 Playwright支持自定义浏览器驱动的安装位置，只需要在系统变量中添加PLAYWRIGHT_BROWSERS_PATH即可。 Playwright支持多款浏览器包括：Chrome、Firefox、Webkit。\n# 安装浏览器驱动 playwright install 安装完成，开始初步的体验吧。将以打开百度首页为例进行使用Playwright。\nimport asyncio import time from playwright.async_api import async_playwright async def main(): async with async_playwright() as p: browser = await p.","title":"Playwright基本介绍"},{"content":"map是一个哈希表。\n","permalink":"https://www.gemc.club/posts/go_map/","summary":"map是一个哈希表。","title":"Go_map"},{"content":"TypeScript是 强类型版的JavaScript。TypeScript允许在定义变量的同时指定类型。\n类型 1. number 2. string 3. array 4. boolean 5. function 6. void 7. object 8. any 9. null 10. undefined 11. unknown 12. never 13. interface .d.ts 1. JS文件 + .d.ts文件 === ts文件 2. .d.ts文件让JS文件继续使用JS文件 泛型 联合类型 # 联合类型（Union Types）可以通过管道(|)将变量设置多种类型，赋值时可以根据设置的类型来赋值。 let name: string | number ","permalink":"https://www.gemc.club/posts/typescript_base/","summary":"\u003cp\u003eTypeScript是 \u003ccode\u003e强类型\u003c/code\u003e版的JavaScript。TypeScript允许在定义变量的同时指定类型。\u003c/p\u003e","title":"Typescript基本知识"},{"content":"1. slice不能比较 2. make函数可以创建一个指定元素类型、长度和容量的slice make([]T, len) make([]T, len, cap) == make([]T, cap)[:len] 1. 一个零值的slice等于nill 2. 一个nil值的slice没有底层数组 3. 一个nil值的slice的长度和容量都是0 append 1. append函数向slice追加元素 ","permalink":"https://www.gemc.club/posts/go_slice/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e\u003cspan style=\"color:#66d9ef\"\u003e1.\u003c/span\u003e slice不能比较\n\u003cspan style=\"color:#66d9ef\"\u003e2.\u003c/span\u003e make函数可以创建一个指定元素类型、长度和容量的slice\n    make([]T, len)\n    make([]T, len, cap) == make([]T, cap)[:len]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Go_slice"}]